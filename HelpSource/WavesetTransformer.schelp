TITLE:: WavesetTransformer
summary:: The waveset transformation as describped by Trevor Wishart
categories:: Wavesets, Microsound
related:: Classes/Wavesets, Classes/WavesetTransformerPlayer
​
DESCRIPTION::
This creates an interface in SuperCollider for working with all of the waveset transformations described by Trevor Wishart, as recounted by Curtis Road in Microsound, plus a few weird ones I found along the way. This class builds off of Alberto De Campo's brilliant Wavesets class and allows for an easier interface for Waveset transformation. The quark this class is found in comes with a wrapper for this class that allows for even easier waveset transformation, look at the help file for that class for examples.


​First code examples:

​
code::
//you'll need a bunch of files to convert to wavesets and preform various transformations
~files = (
	\currSet : String.scDir +/+ "sounds/a11wlk01-44_1.aiff",
	\leaveOneSet : String.scDir +/+ "sounds/a11wlk01-44_1.aiff",
	\leaveTwoSet : String.scDir +/+ "sounds/a11wlk01-44_1.aiff",
	\transferSet : String.scDir +/+ "sounds/a11wlk01-44_1.aiff",
);
~waveSetPlayer = WavesetTransformer(20, ~files);
//lets go
~waveSetPlayer.go(100).play;
::
​
CLASSMETHODS::
​
METHOD:: new

​INSTANCEMETHODS::
​​
METHOD:: deleteDeviation
​
METHOD:: reverseLevel
​
METHOD:: breakAmount
​
METHOD:: moduleSpeedPlusStart
​
METHOD:: startAmt
​
METHOD:: interleaveTwoNormAmt
​
METHOD:: panAmt
​
METHOD:: pan
​
METHOD:: currSet
​
METHOD:: subNormAmt
​
METHOD:: panLevel
​
METHOD:: harmonizeNormLevel
​​​
METHOD:: ampAmt
​
METHOD:: interleaveTwoLevel
​​
METHOD:: multiplier
​
METHOD:: reverseNormAmt
​
METHOD:: shouldInterleaveTwo
​
METHOD:: shouldAverage
​
METHOD:: interleaveOneAmt
​
METHOD:: speedSwapAmt
​
METHOD:: lastAmpAmt
​
METHOD:: modulateStart
​
METHOD:: useCurrBuf
​
METHOD:: reverseAmt
​
METHOD:: deleteLevel
​
METHOD:: shouldPan
​
METHOD:: breakPoint
​
METHOD:: deleteAmt
​
METHOD:: interleaveOneNormLevel
​
METHOD:: setAmpAmt
argument:: amp
​
METHOD:: speedSwapModulo
​
METHOD:: harmonizeLevel
​
METHOD:: speedChangeModulo
​
METHOD:: randomDeleteAmount
​
METHOD:: shouldShrink
​
METHOD:: shouldRandomDelete
​​
METHOD:: normalizeThresh
​
METHOD:: shouldSwap
​
METHOD:: deleteNormAmt
​
METHOD:: breakPointSet
​
METHOD:: shouldSub
​
METHOD:: shuffAmount
​
METHOD:: panNormAmt
​​
METHOD:: baseSpeed
​
METHOD:: averageModulo
​
METHOD:: subBuf
​
METHOD:: panNormLevel
​
METHOD:: waves
​
METHOD:: waveSetAmount
​​​
METHOD:: interleaveTwoNormLevel
​
METHOD:: interleaveTwoAmt
​
METHOD:: shouldDelete
​
METHOD:: setAmpAdd
argument:: amp
​
METHOD:: switchToSet
​
METHOD:: newWaves
argument:: wave
​
METHOD:: breakTop
​
METHOD:: repeats
​
METHOD:: distance
​
METHOD:: leaveTwoSet
​
METHOD:: deleteNormLevel
​
METHOD:: interleaveOneNormAmt
​
METHOD:: modulateSpeed
​
METHOD:: inst
​
METHOD:: currBuf
​​
METHOD:: breakBottom
​
METHOD:: shouldHarmonize
​
METHOD:: deletePauseSet
​
METHOD:: reverseNormLevel
​
METHOD:: interleaveOneLevel
​
METHOD:: shouldNormalize
​
METHOD:: randomWave
​​
METHOD:: shouldReverse
​
METHOD:: getWaves
​
METHOD:: resetInst
​
METHOD:: harmonizeNormAmt
​
METHOD:: deleteReceiver
​
METHOD:: leaveOneSet
​
METHOD:: decBreak
​
METHOD:: subNormLevel
​
METHOD:: shouldDeletePause
​
METHOD:: waveSubMod
​
METHOD:: speed2
​
METHOD:: harmLevel
​
METHOD:: setDefaults
​
METHOD:: ampAdd
​
METHOD:: startModFreq
​​
METHOD:: transferOneNormAmt
​
METHOD:: shrinkAmt
​
METHOD:: subLevel
​
METHOD:: switchSet
​​
METHOD:: normalizeAmount
​
METHOD:: shouldShuffle
​
METHOD:: init
argument:: subBufNum
argument:: files
argument:: mainOut
argument:: fxOut
argument:: server
​
METHOD:: lastAmpAdd
​​
METHOD:: plusAmount
​
METHOD:: speedMod
​
METHOD:: shouldInterleaveOne
​
METHOD:: harmonizeAmt
​
METHOD:: go
argument:: length
​
METHOD:: subAmt

METHOD:: fxAmt

METHOD:: fxLevel

METHOD:: fxNormAmt

METHOD:: fxNormLevel

METHOD:: fxOut

METHOD:: longSwapAmt

METHOD:: longSwapLevel

METHOD:: longSwapNormAmt

METHOD:: longSwapNormLevel

METHOD:: multiLongSwapAmt

METHOD:: multiLongSwapLevel

METHOD:: multiLongSwapNormAmt

METHOD:: multiLongSwapNormLevel

METHOD:: multiSwapAmt

METHOD:: outToMain

METHOD:: repeatSwapAmt

METHOD:: repeatSwapLev

METHOD:: repeatSwapLevel

METHOD:: repeatSwapNormAmt

METHOD:: repeatSwapNormLevel

METHOD:: shouldFx

METHOD:: shouldLongSwap

METHOD:: shouldMultiLongSwap

METHOD:: shouldRepeatSwap

METHOD::shouldTransfer

METHOD::transferAmt

METHOD:: transferLevel

METHOD:: transferNormAmt

METHOD:: transferNormLevel

METHOD:: transferSet

METHOD:: trueOutToMain

METHOD:: ws_scout
​
​
EXAMPLES::
​
code::
//It is recommended copy and pasting all of this into its' own file and working from there.
//drop in more interesting files, but these are standard for SC
~files = (
	\currSet : String.scDir +/+ "sounds/a11wlk01-44_1.aiff",
	\leaveOneSet : String.scDir +/+ "sounds/a11wlk01-44_1.aiff",
	\leaveTwoSet : String.scDir +/+ "sounds/a11wlk01-44_1.aiff",
	\transferSetOne : String.scDir +/+ "sounds/a11wlk01-44_1.aiff",
	\transferSetTwo : String.scDir +/+ "sounds/a11wlk01-44_1.aiff",
);
~waveSetPlayer = WavesetTransformer(20, ~files);

//start playing the wavesets from the current waveset signal back
~waveSetPlayer.go(100).play;
::
​