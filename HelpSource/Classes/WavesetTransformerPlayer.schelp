TITLE:: WavesetTransformerPlayer
summary:: this is a wrapper class for WavesetTransformer, it will make that class much easier to work with.
categories:: Wavesets, Microsound
related:: Classes/Wavesets, Classes/WavesetTransformer

DESCRIPTION::

Some of the things happening in WavesetTransformer require verbose code, such as
code::
```
~waveSetPlayer.shouldInterleaveOne = true;
~waveSetPlayer.interleaveOneLevel = 20;
~waveSetPlayer.interleaveOneNormLevel = 20;
~waveSetPlayer.shouldInterleaveOne = false;
```
::
this class provides wrappers for that verbose code plus a smattering of presets to work with. This class is a living code base. If a great preset is founded, please add it in to the class as a method.


First code examples:

code::
~files = (
	\currSet : String.scDir +/+ "sounds/a11wlk01-44_1.aiff",
	\leaveOneSet : String.scDir +/+ "sounds/a11wlk01-44_1.aiff",
	\leaveTwoSet : String.scDir +/+ "sounds/a11wlk01-44_1.aiff",
	\transferSet : String.scDir +/+ "sounds/a11wlk01-44_1.aiff",
);
~moves = WavesetTransformerPlayer(20,~files);
~moves.go(1).play;
::

CLASSMETHODS::

METHOD:: new
argument:: subBufNum
argument:: files
argument:: wsOut
argument:: mainOut

INSTANCEMETHODS::

METHOD:: shrinkSets
argument:: amt

METHOD:: shuffleSets
argument:: amt

METHOD:: breakSwap
argument:: waitAmount

METHOD:: returnLeaveOneSet

METHOD:: waveset

METHOD:: breakTop

METHOD:: customPan
argument:: norm
argument:: pan
argument:: dir

METHOD:: holderCurrSet

METHOD:: contSpeedDirectBreak

METHOD:: shouldPlayMode

METHOD:: contMultiplierRandomBreak

METHOD:: subSets
argument:: sub
argument:: norm

METHOD:: currFunc

METHOD:: interleaveSetsOne
argument:: inter
argument:: norm

METHOD:: shouldPlaySeries

METHOD:: init
argument:: subBufNum
argument:: files

METHOD:: contMultiplierDirectBreak

METHOD:: wrinkle

METHOD:: humm
argument:: multiplier
argument:: plusAmount
argument:: harmLevel

METHOD:: speedRandom
argument:: waitAmount
argument:: speedStart
argument:: minSpeed
argument:: maxSpeed

METHOD:: randomWave

METHOD:: vasilate

METHOD:: climb

METHOD:: returnLeaveTwoSet

METHOD:: biter
argument:: multiplier
argument:: waveSetAmount

METHOD:: biterSub
argument:: multiplier
argument:: waveSetAmount

METHOD:: reverseSets
argument:: rev
argument:: norm

METHOD:: customPhrase
argument:: breakAmountBottom
argument:: breakAmountTop
argument:: breakBottom
argument:: breakTop
argument:: swapTime

METHOD:: changeLeaveTwoSet
argument:: waveset

METHOD:: ensound
argument:: amt
argument:: add

METHOD:: returnCurrSet

METHOD:: silence

METHOD:: freak

METHOD:: contBreak

METHOD:: multiplierRandom
argument:: waitAmount
argument:: multiplierStart
argument:: minMultiplier
argument:: maxMultiplier

METHOD:: showSnapshot

METHOD:: sputter

METHOD:: cook
argument:: multiplier

METHOD:: takeSnapshot

METHOD:: slurp
argument:: multiplier

METHOD:: shouldScrambleSeries

METHOD:: speedSwap
argument:: modulo
argument:: amt

METHOD:: harmonizeSets
argument:: harmLevel
argument:: harmAmt
argument:: normAmt

METHOD:: randomDeleteSets
argument:: rec
argument:: dev
argument:: pause

METHOD:: bleepAbout

METHOD:: subZipper

METHOD:: crankThatSoulja

METHOD:: speedRandomDirect
argument:: waitAmount
argument:: speedStart
argument:: minSpeed
argument:: maxSpeed
argument:: direction

METHOD:: slowStrong

METHOD:: normalizeSets
argument:: alize
argument:: thresh

METHOD:: playSeries
argument:: base
argument:: waitAmount

METHOD:: holderLeaveOneSet

METHOD:: holderLeaveTwoSet

METHOD:: subAndBlop

METHOD:: moduloSpeedChange
argument:: modulo
argument:: modAmt
argument:: plusAmt

METHOD:: blow

METHOD:: funWithNorm

METHOD:: drone

METHOD:: breakBottom

METHOD:: plotSub

METHOD:: startFlop

METHOD:: changeSubWave
argument:: waveStr

METHOD:: changeLeaveOneSet
argument:: waveset

METHOD:: getRhythm

METHOD:: rev

METHOD:: transferBlang

METHOD:: shouldSwitchMode

METHOD:: go
argument:: amt

METHOD:: sayWow
argument:: baseSpeed
argument:: multiplier

METHOD:: interleaveSetsTwo
argument:: inter
argument:: norm

METHOD:: changeCurrSet
argument:: waveset

METHOD:: deleteSets
argument:: del
argument:: norm
argument:: pause

METHOD:: snapShot

METHOD:: multiplierRandomDirect
argument:: waitAmount
argument:: multiplierStart
argument:: minMultiplier
argument:: maxMultiplier
argument:: direction

METHOD:: norm

METHOD:: contSpeedRandomBreak

METHOD:: changeTransferSet

METHOD:: fadeOut

METHOD:: fxSwap

METHOD:: holderTransferSet

METHOD:: holderTransferSet

METHOD:: longSwap

METHOD:: multiLongSwap

METHOD:: ramp

METHOD:: repeatLongSwap

METHOD:: returnTransferSet

METHOD:: setSnapshot

METHOD:: transferSets

EXAMPLES::

code::
~files = (
	\currSet : String.scDir +/+ "sounds/a11wlk01-44_1.aiff",
	\leaveOneSet : String.scDir +/+ "sounds/a11wlk01-44_1.aiff",
	\leaveTwoSet : String.scDir +/+ "sounds/a11wlk01-44_1.aiff",
	\transferSet : String.scDir +/+ "sounds/a11wlk01-44_1.aiff",
);
~inst = WavesetTransformerPlayer(20, ~files);

i = ~inst.go(50000);
i.play;

//change the level of the sound, first is argument is multiplied by the amplitude, second is added to the amplitude
~inst.ensound(0.85, 0.85);

//fade to black
~inst.fadeOut(4);

//don't fade
~inst.silence;

//back to it
~inst.ensound(0.85, 0.85);

// find out what the current settings are
~inst.takeSnapshot();
~inst.showSnapshot();
// back to normal
~inst.norm();
// set the settings to the last snap shot taken
~inst.setSnapshot();

//play a series of wavesets at the current speed and then a series at a different speed
~inst.longSwap(10, 90, {rrand(0.2,3)});
~inst.longSwap(10, 90, 2);
~inst.ramp(\longSwapLevel, 20, 30);
~inst.ramp(\longSwapNormLevel, 30, 200);
~inst.ramp(\speedSwapAmt, 30, 5);
~inst.waveset.shouldLongSwap = false;
~inst.waveset.shouldLongSwap = true;

//play a series of wavesets with the current multiplier and then a series at a different multiplier
~inst.multiLongSwap(50, 90, 10);
~inst.ramp(\multiLongSwapLevel, 20, 1);
~inst.ramp(\multiLongSwapNormLevel, 30, 80);
~inst.ramp(\multiSwapAmt, 5, 2);
~inst.waveset.shouldMultiLongSwap = false;
~inst.waveset.shouldMultiLongSwap = true;


//play a series of wavesets with the current repeat amount and then a series of wavesets with a different repeat amount
~inst.repeatLongSwap(10, 100, 5);
~inst.ramp(\repeatSwapLevel, 1, 1);
~inst.ramp(\repeatSwapNormLevel, 45, 500);
~inst.ramp(\repeatSwapLev, 5, 0);
~inst.waveset.shouldRepeatSwap = false;
~inst.waveset.shouldRepeatSwap = true;

// change the speed each waveset is played at
~inst.waveset.baseSpeed = {1};
~inst.ramp(\baseSpeed, 10, 10);
~inst.waveset.baseSpeed.value();

//change the amount of wavesets played each time
~inst.waveset.waveSetAmount = {rrand(10,150)};
~inst.waveset.waveSetAmount = {20};
~inst.ramp(\waveSetAmount, 10, 200);
~inst.waveset.waveSetAmount.value();

// change the number of times each waveset is repeated
~inst.waveset.repeats = {1};
~inst.ramp(\repeats, 2, 1);
~inst.waveset.repeats.value();

// change the amount each waveset is multiplied by in length
~inst.waveset.multiplier = {12.25};
~inst.ramp(\multiplier, 2, 2.75);
~inst.waveset.multiplier.value();

// instead of multiplying, divide
~inst.waveset.shouldSwap = true;
~inst.waveset.shouldSwap = false;

// change the amount of distance between the playing of each waveset
~inst.waveset.distance = {0.1};
~inst.ramp(\distance, 2, 0.0);
~inst.waveset.distance.value();

// place a series of waveset at a position in the stereo field and a number of wavesets in the opposite position of the stereo field
~inst.customPan(1,1,1);
~inst.ramp(\pan, 5, 0);
~inst.ramp(\panLevel, 20, 90);
~inst.ramp(\panNormLevel, 10, 2);

// mess with the speed
~inst.moduloSpeedChange(4, {5}, {0.09});
~inst.waveset.speedChangeModulo = {~sax.waveset.currSet.xings.size*2}

// every n wavesets play at a different speed
~inst.speedSwap(2, 0.85);
// stop doing the above
~inst.waveset.speedSwapModulo = {~sax.waveset.currSet.xings.size*2};

// back to the standard synth
~inst.waveset.resetInst();
// use a synth that modulates the start time of each waveset
~inst.waveset.modulateStart();
// use a synth that modulates the speed of each waveset
~inst.waveset.modulateSpeed();
// use a synth that modulates the start and speed
~inst.waveset.moduleSpeedPlusStart();
// modulate between the current set speed and the number set below
~inst.waveset.speed2 = 10.85;
~inst.ramp(\speed2, 30, 9.25);
// modulate between the start and the number set below
~inst.waveset.startModFreq = 1.55;
~inst.ramp(\startModFreq, 30, 0.5);
// the below setting changes how fast the start time is modulated
~inst.waveset.startAmt = 8.25;
~inst.ramp(\startAmt, 40, 1.25);

// add an envelope to a a chunk of wavesets to produce phrases
~inst.customPhrase(0.001, 0.01, 20, 120, 0.1);
~inst.breakBottom = 10;
~inst.breakTop = 50;
~inst.waveset.breakAmount = {rrand(0.001, 0.02)};
~inst.waveset.breakAmount = {0.5};

~inst.ramp(\breakBottom, 30, 35);
~inst.ramp(\breakTop, 30, 90);
~inst.ramp(\breakAmount, 10, 0.1);

~inst.waveset.decBreak = true;
// stop making phrases
~inst.waveset.decBreak = false;

~inst.getRhythm();
~inst.slowStrong();

// change the speed, in a clear way, at a starting speed at a set interval
~inst.playSeries(2,0.01);
// mix up the order of the speeds
~inst.shouldScrambleSeries = true;
~inst.shouldScrambleSeries = false;
~inst.shouldPlaySeries = false;
~inst.shouldPlaySeries = true;

// randomly change the speed at a set interval, leaning towards going up and down
~inst.speedRandomDirect(8, 9.0, 9.0, 15.0, 1);
~inst.contSpeedDirectBreak = false;

// randomly change the speed at a set interval, without the leaning
~inst.speedRandom(1,7,6,14);
~inst.contSpeedRandomBreak = false;

// randomly change the multiplier at a set inverval, leaning towards going up and down
~inst.multiplierRandomDirect(0.1, 2, 0.9, 6.0, 1);
~inst.contMultiplierDirectBreak = false;

// randomly change the multiplier at a set interval, without the leaning
~inst.multiplierRandom(0.01, 2.2, 0.9, 4);
~inst.multiplierRandom(0.2,1,2,10);
~inst.contMultiplierRandomBreak = false;

// harmonize a chunk of wavesets, and not harmonize another chunk
~inst.harmonizeSets({0.85}, 10, 10);
~inst.ramp(\harmonizeLevel, 20, 10);
~inst.ramp(\harmonizeNormLevel, 10, 5000);
~inst.ramp(\harmLevel, 10, 0.75);
~inst.waveset.shouldHarmonize = false;

// remove a chunk of wavesets and then don't delete a chunk
~inst.deleteSets(1, 5,false);
~inst.ramp(\deleteLevel, 80, 50);
~inst.ramp(\deleteNormLevel, 60, 20);
~inst.randomDeleteSets(1, 5, false);
~inst.waveset.shouldDelete = false;
~inst.waveset.shouldRandomDelete = false;
~inst.waveset.shouldDeletePause = true;
~inst.waveset.shouldDeletePause = false;

// remove all wavesets below a certain threshold
~inst.shrinkSets(3.2);
~inst.ramp(\shrinkAmt, 30, 1.2);
~inst.waveset.shouldShrink = false;

// mix up the wavesets using the adjacent n wavesets
~inst.shuffleSets({30});
~inst.ramp(\shuffAmount, 20, 10);
~inst.waveset.shouldShuffle = false;

// reverse a series of wavesets and then don't reverse a series
~inst.reverseSets(100, 50);
~inst.ramp(\reverseLevel, 10, 20);
~inst.ramp(\reverseNormLevel, 10, 50);
~inst.waveset.shouldReverse = false;

// transfer the amplitude of the transfer set to the current set (won't do anything because all the waveset files are the same)
~inst.transferSets(1, 1);
~inst.ramp(\transferLevel, 5, 10);
~inst.ramp(\transferNormLevel, 70, 100);
~inst.waveset.shouldTransfer = false;

// interleave the wavesets from interleave sets one with the wavesets in the current file
~inst.interleaveSetsOne(1, 1);
~inst.ramp(\interleaveOneLevel, 100, 50);
~inst.ramp(\interleaveOneNormLevel, 50, 500);
~inst.waveset.shouldInterleaveOne = false;

// interleave the wavesets from interleave sets two with the wavesets in the current file
~inst.interleaveSetsTwo(3, 3);
~inst.ramp(\interleaveTwoLevel, 50, 10);
~inst.ramp(\interleaveTwoNormLevel, 20, 900);
~inst.waveset.shouldInterleaveTwo = false;

// set a series of wavesets to the fx bus and then a series to the normal bus
~inst.fxSwap(50, 10);
~inst.ramp(\fxLevel, 10, 1);
~inst.ramp(\fxNormLevel, 10, 3);
~inst.waveset.shouldFx = false;

// set a series of wavesets' amplitude to a normal level
~inst.normalizeSets(20, 0.1);
~inst.ramp(\normalizeAmount, 200, 1);
~inst.ramp(\normalizeThresh, 200, 1);
~inst.waveset.shouldNormalize = false;

// substitute a given waveform for a series of wavesets and then use the regular waveform for a series of wavesets
~inst.waveset.waveSubMod = {2000};
~inst.waveset.waveSubMod =  {~sax.waveset.currSet.xings.size};
~inst.ramp(\waveSubMod, 3, 90);
~inst.subSets(10, 10);
~inst.ramp(\subLevel, 30, 1);
~inst.ramp(\subNormLevel, 90, 200);
~inst.waveset.shouldSub = false;
~inst.waveset.waves.showKeys();
~inst.changeSubWave('crazyu');
~inst.waveset.randomWave();
~inst.waveset.subBuf.plot

// Different events in the lifecycle of the playback of the wavesets send out triggers, so things can be programmed to happen at differnet points in the lifecycle

// for instance playing a sound at the end of each run of the waveset

(
SynthDef(\test_scout,{

	var env = EnvGen.ar(Env([0,1,0],[0.01,0.25]),doneAction:2);

	var in = SinOsc.ar*env;

	Out.ar(0,Pan2.ar(in));

}).add;
)

(
~test = {~inst.waveset.ws_scout.set_actions( (
	\wavesetEnd:[
		{arg val;}
	],
	\wavesetGroupStart: [{
		{"GROUP START".postln;}

	}],
	\wavesetGroupEnd: [
		{"GROUP END".postln;},
	],
	\rampEnds:[
		{"RAMP END".postln;},
	],
	\wavesetLoopEnd:[
		{"WAVESET LOOP END".postln},
		{Synth(\test_scout)}
	],
	\wavesetLoopsFinshed:[
		{"ALL DONE".postln;}
	],
)
)};
)

~test.value();
